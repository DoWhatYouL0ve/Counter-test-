{"version":3,"sources":["counter/setCounterRange/setCounterRange.module.css","counter/counterDisplay/display.module.css","counter/counter.module.css","counter/counterButton/button.module.css","counter/counterDisplay/display.tsx","counter/counterButton/button.tsx","counter/counter.tsx","counter/setCounterRange/setCounterRange.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","setGoodRange","rangeSetDisabled","className","s","display","value","maxCounterValue","red","undefined","error","Button","button","onClick","disabled","disabledValue","title","Counter","wrapper","displayWrapper","buttonWrapper","newValueCounter","resetValueCounter","SetCounterRange","chooseValueWrapper","valueWrapper","type","rangeValueMax","onFocusError","rangeValueStart","inputError","onChange","e","body","target","onChangeMax","onFocus","onChangeStart","setRange","App","useState","setRangeValueStart","setRangeValueMax","setRangeSetDisabled","setOnFocusError","setValue","setDisabledValue","setMaxCounterValue","useEffect","getFromLocalStorageMinValue","localStorage","getItem","newValueMin","JSON","parse","getFromLocalStorageMaxValue","newValueMax","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6e598c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"setCounterRange_wrapper__-9_33\",\"chooseValueWrapper\":\"setCounterRange_chooseValueWrapper__1xRvw\",\"valueWrapper\":\"setCounterRange_valueWrapper__128vS\",\"inputError\":\"setCounterRange_inputError__3IcBo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"display_display__256ay\",\"red\":\"display_red__2W7B4\",\"error\":\"display_error__2MTE5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"counter_wrapper__E8Ers\",\"buttonWrapper\":\"counter_buttonWrapper__3kta4\",\"displayWrapper\":\"counter_displayWrapper__22bXI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__1Zimu\"};","import s from './display.module.css'\r\nimport React from \"react\";\r\n\r\n\r\ntype DisplayType = {\r\n    value: number\r\n    maxCounterValue: number\r\n    setGoodRange: boolean\r\n    rangeSetDisabled: boolean\r\n}\r\n\r\nexport const Display = (props: DisplayType) => {\r\n\r\n    return (\r\n        <div>\r\n            {props.setGoodRange && props.rangeSetDisabled?\r\n                (<div className={s.display}>\r\n                    <span className={props.value === props.maxCounterValue ? s.red : undefined}>{props.value}</span>\r\n                </div>) : props.setGoodRange && !props.rangeSetDisabled ?\r\n                    (<div className={s.error}><p>enter values and press \"set\"</p></div>) :\r\n                    (<div className={s.error}><p className={s.red}>Incorrect value</p></div>)}\r\n        </div>\r\n    )\r\n}\r\n","import s from './button.module.css'\r\n\r\ntype ButtonType = {\r\n    onClick: () => void\r\n    disabledValue?: boolean\r\n    title: string\r\n}\r\n\r\nexport const Button = (props: ButtonType) => {\r\n    return (\r\n        <div>\r\n            <button className={s.button} onClick={props.onClick} disabled={props.disabledValue}>{props.title}</button>\r\n        </div>\r\n\r\n    )\r\n}","import s from './counter.module.css'\r\nimport {Display} from './counterDisplay/display'\r\nimport {Button} from \"./counterButton/button\";\r\n\r\n\r\ntype CounterType = {\r\n    resetValueCounter: () => void\r\n    value: number\r\n    newValueCounter: () => void\r\n    disabledValue: boolean\r\n    maxCounterValue: number\r\n    setGoodRange: boolean\r\n    rangeSetDisabled: boolean\r\n}\r\n\r\nexport const Counter = (props: CounterType) => {\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.displayWrapper}>\r\n                <Display value={props.value}\r\n                         maxCounterValue={props.maxCounterValue}\r\n                         setGoodRange={props.setGoodRange}\r\n                         rangeSetDisabled={props.rangeSetDisabled}\r\n                />\r\n            </div>\r\n            <div className={s.buttonWrapper}>\r\n                <Button onClick={props.newValueCounter}\r\n                        disabledValue={props.value === props.maxCounterValue || !props.rangeSetDisabled}\r\n                        title={'Raise'}/>\r\n                <Button onClick={props.resetValueCounter}\r\n                        disabledValue={props.disabledValue}\r\n                        title={'Reset'}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from './setCounterRange.module.css'\r\nimport {Button} from \"../counterButton/button\";\r\n\r\ntype SetCounterRangeType = {\r\n    rangeValueMax: number\r\n    rangeValueStart: number\r\n    onChangeMax: (body: number) => void\r\n    onChangeStart: (body: number) => void\r\n    setRange: () => void\r\n    setGoodRange: boolean\r\n    rangeSetDisabled: boolean\r\n    onFocus: () => void\r\n    onFocusError: boolean\r\n}\r\n\r\nexport const SetCounterRange = (props: SetCounterRangeType) => {\r\n\r\n    const onChangeMax = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let body = e.target.value\r\n        props.onChangeMax(+body)\r\n    }\r\n\r\n    const onChangeStart = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let body = e.target.value\r\n        props.onChangeStart(+body)\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.chooseValueWrapper}>\r\n                <div className={s.valueWrapper}>\r\n                    <b>max value: </b>\r\n                    <input type={'number'} value={props.rangeValueMax} className={props.onFocusError && props.rangeValueMax <= props.rangeValueStart? s.inputError : undefined} onChange={onChangeMax} onFocus={props.onFocus}/>\r\n                </div>\r\n                <div className={s.valueWrapper}>\r\n                    <b>start value: </b>\r\n                    <input type={'number'} value={props.rangeValueStart} className={props.onFocusError && (props.rangeValueStart >= props.rangeValueMax || props.rangeValueStart) < 0 ? s.inputError : undefined} onChange={onChangeStart} onFocus={props.onFocus}/>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.buttonWrapper}>\r\n                <Button onClick={props.setRange}\r\n                        title={'Set'}\r\n                        disabledValue={!props.setGoodRange || props.rangeSetDisabled}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./counter/counter\";\nimport {SetCounterRange} from './counter/setCounterRange/setCounterRange'\n\n\n\nfunction App() {\n\n    // code to set the range for the counter\n    const [rangeValueStart, setRangeValueStart] = useState<number>(0)\n    const [rangeValueMax, setRangeValueMax] = useState<number>(1)\n    const [rangeSetDisabled, setRangeSetDisabled] = useState<boolean>(true)\n    const [onFocusError, setOnFocusError] = useState<boolean>(false)\n\n    // code for the counter\n    let [value, setValue] = useState<number>(0)\n    const [disabledValue, setDisabledValue] = useState<boolean>(true)\n\n    let [maxCounterValue, setMaxCounterValue] = useState<number>(5)\n\n    const newValueCounter = () => {\n        if (value < maxCounterValue)  {\n            setValue(value + 1)\n            setDisabledValue(false)\n        }\n    }\n\n    const resetValueCounter = () => {\n        setValue(rangeValueStart)\n        setDisabledValue(true)\n    }\n\n    // code to set the range for the counter\n\n    const onChangeMax = (body: number) => {\n        setRangeValueMax(body)\n        setRangeSetDisabled(false)\n    }\n\n    const onChangeStart = (body: number) => {\n        setRangeValueStart(body)\n        setRangeSetDisabled(false)\n    }\n\n    const setRange = () => {\n        setValue(rangeValueStart)\n        setMaxCounterValue(rangeValueMax)\n        setRangeSetDisabled(true)\n    }\n\n    const onFocus = () => {\n        setOnFocusError(true)\n    }\n\n    const setGoodRange = rangeValueStart >= 0 && rangeValueMax > rangeValueStart\n\n    // localStorage\n\n    useEffect( () => {\n        let getFromLocalStorageMinValue = localStorage.getItem('minValue')\n\n        if (getFromLocalStorageMinValue) {\n            let newValueMin = JSON.parse(getFromLocalStorageMinValue)\n            setRangeValueStart(newValueMin)\n            setValue(newValueMin)\n        }\n\n    }, [])\n\n    useEffect( () => {\n        let getFromLocalStorageMaxValue = localStorage.getItem('maxValue')\n        if (getFromLocalStorageMaxValue) {\n            let newValueMax = JSON.parse(getFromLocalStorageMaxValue)\n            setRangeValueMax(newValueMax)\n            setMaxCounterValue(newValueMax)\n        }\n    }, [])\n\n    useEffect( () => {\n        localStorage.setItem('minValue', JSON.stringify(rangeValueStart))\n        localStorage.setItem('maxValue', JSON.stringify(rangeValueMax))\n    }, [rangeValueStart, rangeValueMax])\n\n\n\n  return (\n      <div className=\"App\">\n          <div className={'counterWrapper'}>\n              <SetCounterRange rangeValueStart={rangeValueStart}\n                               rangeValueMax={rangeValueMax}\n                               onChangeMax={onChangeMax}\n                               onChangeStart={onChangeStart}\n                               setRange={setRange}\n                               setGoodRange={setGoodRange}\n                               rangeSetDisabled={rangeSetDisabled}\n                               onFocus={onFocus}\n                               onFocusError={onFocusError}\n              />\n              <Counter resetValueCounter={resetValueCounter}\n                       value={value}\n                       newValueCounter={newValueCounter}\n                       disabledValue={disabledValue}\n                       maxCounterValue={maxCounterValue}\n                       setGoodRange={setGoodRange}\n                       rangeSetDisabled={rangeSetDisabled}\n              />\n          </div>\n\n\n      </div>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}